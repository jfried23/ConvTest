{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import multiprocessing\n",
    "import time\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>I have a function sillySquare that I use to compute the square of a bunch of numbers. Unfortunately I also write silly code and my function takes way too long to compute for large datasets. I supose I could just write a more efficient function for computing the square, but that is not always possible and besides, would be no fun.</p>\n",
    "<p>Computing the square of a bunch of numbers is an example of an \"embarrassingly parallel problem\". The problem is parallel because the result of computing one square does not influence the result of any other subsequent calculation. The problem is embarrassing because....They are called that; embarrassingly parallel problems are <i><b>nothing</b></i> to be ashamed of, in fact as we will see, they are a great kind of problem to have!</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def sillySquare( x, waitTime ):\n",
    "    \"\"\"\n",
    "    sillySquare takes aproximatly waitTime seconds to do the\n",
    "    hard work of computing x*x.\n",
    "    \n",
    "    INPUTS:\n",
    "        x        -- (float/int) Value to square.\n",
    "        waitTime -- (float/int) Number of seconds to waste.\n",
    "    \n",
    "    RETURN:    \n",
    "         (float) value of x squared \n",
    "    \"\"\"\n",
    "    time.sleep(waitTime)\n",
    "    return x*x"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>To show that our function is slow and silly lets use it to compute the square of a dataset of eight values. If we set waitTime to 1 second our work should take approximately 8 seconds to complete.</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Our data is    : [3 8 0 0 0 4 5 8]\n",
      "Our waitTime is: [1 1 1 1 1 1 1 1]\n"
     ]
    }
   ],
   "source": [
    "our_data  = np.random.randint(0,10,8)\n",
    "wait_time = np.ones(8, dtype=np.int) \n",
    "print('Our data is    : {}'.format(our_data))\n",
    "print('Our waitTime is: {}'.format(wait_time))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Job took 8.02 seconds\n",
      "Computed the values: [9, 64, 0, 0, 0, 16, 25, 64]\n"
     ]
    }
   ],
   "source": [
    "t_start = time.time()\n",
    "\n",
    "results = []\n",
    "\n",
    "for x,wait in zip(our_data,wait_time):\n",
    "    square = sillySquare(x, wait)\n",
    "    results.append(square)\n",
    "\n",
    "t_end = time.time()\n",
    "\n",
    "print(\"Job took {:0.3} seconds\".format(t_end-t_start))\n",
    "print(\"Computed the values: {}\".format(results))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>In our for loop above all the work was being done by a single CPU in series. Work on the first value in our dataset had to finish before work on the second value could begin. Modern computers have many logical CPU's however; we could be using them all to speed this calculation up!</p>\n",
    "<p>We can do this using the multiprocessing library. (Note: multiprocessing is not the same thing as multithreading, another term you may be familiar with. Do not confuse the two, they are actually quite different.)</p> "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This machine has 8 logical cpu's. Lets use them to speed things up!\n"
     ]
    }
   ],
   "source": [
    "n_cpus = multiprocessing.cpu_count()\n",
    "\n",
    "print(\"This machine has {0} logical cpu's.\\\n",
    " Lets use them to speed things up!\".format(n_cpus))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Job took 1.04 seconds\n",
      "Computed the values: [9, 64, 0, 0, 0, 16, 25, 64]\n"
     ]
    }
   ],
   "source": [
    "t_start = time.time()\n",
    "\n",
    "#Create a job pool using the multiprocessing library\n",
    "job_pool = multiprocessing.Pool(n_cpus)\n",
    "\n",
    "#Apply the job pool to our function handle \n",
    "# and an iterable of input params [(x0, waitTime0) ... (x7, waitTime7)].\n",
    "parallel_square = job_pool.starmap(sillySquare, zip(our_data,wait_time) )\n",
    "\n",
    "#close our job pool\n",
    "job_pool.close()\n",
    "\n",
    "#Enjoy the 7 seconds we just saved!\n",
    "\n",
    "t_end = time.time()\n",
    "print(\"Job took {:0.3} seconds\".format(t_end-t_start))\n",
    "print(\"Computed the values: {}\".format(parallel_square))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>Nice!</p>"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
